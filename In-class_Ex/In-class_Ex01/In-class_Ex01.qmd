---
title: "In-class_Exercise 1"
author: "Qu JunJie"
date: "20 Aug 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
format: 
  html:
    code-fold: true
---

# Getting started

-   Launch the coursework project with RStudio

-   Create a new folder called *In-class_Ex*.

-   Create a new sub-folder inside the newly created *In-class_Ex* folder. Name the sub-folder *In-class_Ex01*.

-   Create a new Quarto document. Save the newly create qmd file in In-class_Ex01 sub-folder. Call the file *In-class_Ex01*.

# Loading the R packages

For the purpose of this in-class exercise, the following R packages will be used:

-   [tidyverse](https://www.tidyverse.org/)

-   [sf](https://r-spatial.github.io/sf/)

-   [tmap](https://r-tmap.github.io/tmap/)

-   [ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/)

Write a code chunk to check if these two packages have been installed in R. If yes, load them in R environment.

```{r}
pacman::p_load(tidyverse, sf, tmap, ggstatsplot)
```

# Working with Master Plan Planning Sub-zone Data

-   Create a sub-folder called data in In-class_Ex01 folder.

-   If necessary visit data.gov.sg and download *Master Plan 2014 Subzone Boundary (Web)* from the portal. You are required to download both the ESRI shapefile and kml file.

-   Write a code chunk to import *Master Plan 2014 Subzone Boundary (Web)* in shapefile and kml save them in sf simple features data frame.

```{r}
mpsz14_shp <- st_read(dsn = "data/",
                      layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
mpzsz14_kml <- st_write(mpsz14_shp, 
                "data/MasterPlan2014SubzoneBoundaryWebKML.kml",
                delete_dsn = TRUE)
```

# Working with Master Plan Planning Sub-zone Data

1.  Write a code chunk to export *mpsz14_shp* sf data.frame into **kml** file save the output in data sub-folder. Name the output file *MP14_SUBZONE_WEB_PL*.

```{r}
st_write(mpsz14_shp, 
         "data/MP14_SUBZONE_WEB_PL.kml",
         delete_dsn = TRUE)
```

# Working with Pre-school Location Data

-   If necessary visit data.gov.sg and download *Pre-Schools Location* from the portal. You are required to download both the kml and geojson files.

-   Write a code chunk to import *Pre-Schools Location* in kml geojson save them in sf simple features data frame.

```{r}
preschool_kml <- st_read("data/PreSchoolsLocation.kml")
```

```{r}
preschool_geojson <- st_read("data/PreSchoolsLocation.geojson") 
```

# Working with Master Plan 2019 Subzone Boundary Data

-   Visit data.gov.sg and download *Master Plan 2019 Subzone Boundary (No Sea)* from the portal. You are required to download both the kml file.

-   Move *MPSZ-2019* shapefile provided for In-class Exercise 1 folder on elearn to data sub-folder of In-class_Ex02.

-   Write a code chunk to import *Master Plan 2019 Subzone Boundary (No SEA)* kml and MPSZ-2019 into sf simple feature data.frame.

```{r}
mpsz19_shp <- st_read(dsn = "data/",
                layer = "MPSZ-2019")
```

```{r}
mpsz19_kml <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```

# Handling Coordinate Systems

### Checking coordinate system

Write a code chunk to check the project of the imported sf objects.

```{r}
st_crs(mpsz19_shp)
```

### Transforming coordinate system

Re-write the code chunk to import the Master Plan Sub-zone 2019 and Pre-schools Location with proper transformation

```{r}
mpsz19_shp <- st_read(dsn = "data/",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
preschool <- st_read("data/PreSchoolsLocation.kml") %>%
  st_transform(crs = 3414)
```

# Geospatial Data Wrangling

### Point-in-Polygon count

Write a code chunk to count the number of pre-schools in each planning sub-zone.

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(`PreSch Count` = lengths(
    st_intersects(mpsz19_shp, preschool)))
```

### Computing density

Write a single line code to perform the following tasks:

1.  Derive the area of each planning sub-zone.

2.  Drop the unit of measurement of the area (i.e.Â m\^2)

3.  Calculate the density of pre-school at the planning sub-zone level.

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(Area = units::drop_units(
    st_area(.)),
    `PreSch Density` = `PreSch Count` / Area * 1000000
  )
```

# Statistical Analysis

Using appropriate Exploratory Data Analysis (EDA) and Confirmatory Data Analysis (CDA) methods to explore and confirm the statistical relationship between Pre-school Density and Pre-school count.

Tip: Refer to [`ggscatterstats()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggscatterstats.html) of **ggstatsplot** package.

```{r}
mpsz$`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))
mpsz$`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) 
mpsz19_shp <- as.data.frame(mpsz19_shp)

ggscatterstats(data = mpsz19_shp,
               x = `PreSch Density`,
               y = `PreSch Count`,
               type = "parametric")
```

# Working with Population Data

1.  Visit and extract the latest Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling from Singstat homepage.

```{r}
popdata <- read_csv("data/respopagesextod2023.csv")
```

# Data Wrangling

1.  Write a code chunk to prepare a data.frame showing population by Planning Area and Planning subzone

```{r}
popdata2023 <- popdata %>% 
  group_by(PA, SZ, AG) %>% 
  summarise(`POP`=sum(`Pop`)) %>%  
  ungroup() %>% 
  pivot_wider(names_from=AG,
              values_from = POP)

colnames(popdata2023)
```

## Data Processing

Write a code chunk to derive a tibble data.framewith the following fields PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY where by:

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group.

```{r}
popdata2023 <- popdata2023 %>%
  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24
         +rowSums(.[14])) %>% # Aged 5 - 9
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59
  rowSums(.[15])) %>%  # Aged 60 -64
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)
  / `ECONOMY ACTIVE`) %>% 
  select(`PA`, `SZ`, `YOUNG`, 
         `ECONOMY ACTIVE`, `AGED`,
         `TOTAL`, `DEPENDENCY`)
```

## Joining popdata2023 and mpsz19_shp

```{r}
popdata2023 <- popdata2023 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) 
mpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,
                          by = c("SUBZONE_N" = "SZ"))
pop2023_mpsz <- left_join(popdata2023, mpsz19_shp, 
                          by = c("SZ" = "SUBZONE_N"))
```

## Choropleth Map of Dependency Ratio by Planning Subzone

![](images/clipboard-2211194703.png)

## Analytical Map: Percentile Map

### The concept

The percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.

### Step 1: Data Preparation

The code chunk below excludes records with NA by using the code chunk below.

```{r}
mpsz_pop2023 <- mpsz_pop2023 %>%
  drop_na()
```

### Step 2: The get function

The code chunk below defines a function to get the input data and field to be used for creating the percentile map.

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

### Step 3: A percentile mapping function

The code chunk below creates a function for computing and plotting the percentile map.

```{r}
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(mpsz_pop2023) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```

### Step 4: Running the functions

```{r}
percentmap("DEPENDENCY", mpsz_pop2023)
```

![](images/clipboard-224480636.png)

## Analytical Map: Box Map

### The Concept

In essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).

### Step 1: Creating the boxbreaks function

The code chunk on the right is an R function that creating break points for a box map.

-   arguments:

    -   v: vector with observations

    -   mult: multiplier for IQR (default 1.5)

-   returns:

    -   bb: vector with 7 break points compute quartile and fences

### Step 2: Creating the get.var function

The code chunk on the right an R function to extract a variable as a vector out of an sf data frame.

-   arguments:

    -   vname: variable name (as character, in quotes)

    -   df: name of sf data frame

-   returns:

    -   v: vector with values (without a column name)

### Step 3: Boxmap function

The code chunk on the right is an R function to create a box map.

-   arguments:

    -   vnam: variable name (as character, in quotes)

    -   df: simple features polygon layer

    -   legtitle: legend title

    -   mtitle: map title

    -   mult: multiplier for IQR

-   returns:

    -   a tmap-element (plots a map)

### Step 4: Plotting Box Map

```{r}
boxmap("DEPENDENCY", mpsz_pop2023)
```

![](images/clipboard-2270778185.png)

### Plotting Interactive Box Map

```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
boxmap("DEPENDENCY", mpsz_pop2023)
```
