---
title: "In-class_Ex02"
author: "Qu JunJie"
date: "02 Sep 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
format: 
  html:
    code-fold: true
---

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

# Issue 1: Installing maptools

maptools is retired and bnary is removed from CRAN. However, we can download from Posit Public Package Manger snapshots by using the code chunk below.

```{r}
#| eval: FALSE
install.packages("maptools", repos = "https://packagemanager.posit.co/cran/2023-10-13")
```

After the installation is completed, it is important to edit the code chunk as show above in order to avoid

# Issue 2: Creating coastal outline

In **sf** package, there are two functions allow us to combine multiple simple features into one simple features. They are [`st_combine()`](https://r-spatial.github.io/sf/reference/geos_combine.html) and `st_union()`.

-   `st_combine()` returns a single, combined geometry, with no resolved boundaries; returned geometries may well be invalid.

-   If y is missing, `st_union(x)` returns a single geometry with resolved boundaries, else the geometries for all unioned pairs of x\[i\] and y\[j\].

```{r}
# sg_sf <- mpsz_sf %>%
#   st_union()
```

sg_sf will look similar to figure below.

### Working with `st_union()`

The code chunk below, `st_union()`is used to derive the coastal outline sf tibble data.frame.

```{r}
sg_sf <- mpsz_sf %>%
  st_union()
```

*sg_sf* will look similar to the figure below.

![](images/clipboard-3038439682.png)

## Introducing spatstat package

[**spatstat**](https://spatstat.org/) R package is a comprehensive open-source toolbox for analysing Spatial Point Patterns. Focused mainly on two-dimensional point patterns, including multitype or marked points, in any spatial region.

## spatstat

### spatstat sub-packages

-   The [**spatstat**](https://cran.r-project.org/web/packages/spatstat/index.html) package now contains only documentation and introductory material. It provides beginner’s introductions, vignettes, interactive demonstration scripts, and a few help files summarising the package.

-   The [**spatstat.data**](https://isss626-ay2024-25aug.netlify.app/in-class_ex/in-class_ex02/in-class_ex02-sppa) package now contains all the datasets for spatstat.

-   The [**spatstat.utils**](https://cran.r-project.org/web/packages/spatstat.utils/index.html) package contains basic utility functions for spatstat.

-   The [**spatstat.univar**](https://cran.r-project.org/web/packages/spatstat.univar/spatstat.univar.pdf) package contains functions for estimating and manipulating probability distributions of one-dimensional random variables.

-   The [**spatstat.sparse**](https://cran.r-project.org/web/packages/spatstat.sparse/spatstat.sparse.pdf) package contains functions for manipulating sparse arrays and performing linear algebra.

-   The [**spatstat.geom**](https://cran.r-project.org/web/packages/spatstat.geom/index.html) package contains definitions of spatial objects (such as point patterns, windows and pixel images) and code which performs geometrical operations.

-   The [**spatstat.random**](https://cran.r-project.org/web/packages/spatstat.random/index.html) package contains functions for random generation of spatial patterns and random simulation of models.

-   The [**spatstat.explore**](https://cran.r-project.org/web/packages/spatstat.explore/index.html) package contains the code for exploratory data analysis and nonparametric analysis of spatial data.

-   The [**spatstat.model**](https://cran.r-project.org/web/packages/spatstat.model/index.html) package contains the code for model-fitting, model diagnostics, and formal inference.

-   The [**spatstat.linnet**](https://cran.r-project.org/web/packages/spatstat.linnet/index.html) package defines spatial data on a linear network, and performs geometrical operations and statistical analysis on such data.

## Creating ppp objects from sf data.frame

Instead of using the two steps approaches discussed in Hands-on Exercise 3 to create the **ppp** objects, in this section you will learn how to work with sf data.frame.

In the code chunk below, [`as.ppp()`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/as.ppp.html) of [**spatstat.geom**](https://cran.r-project.org/web/packages/spatstat.geom/spatstat.geom.pdf) package is used to derive an **ppp** object layer directly from a sf tibble data.frame.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
plot(childcare_ppp)
```

Next, `summary()` can be used to reveal the properties of the newly created ppp objects.

```{r}
summary(childcare_ppp)
```

## Creating ***owin*** object from sf data.frame

In the code chunk `as.owin()` of **spatstat.geom** is used to create an **owin** object class from polygon sf tibble data.frame.

```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
```

Next, *summary()* function is used to display the summary information of the owin object class.

```{r}
summary(sg_owin)
```

## Combining point events object and owin object

Using the step you learned from Hands-on Exercise 3, create an ppp object by combining childcare_ppp and sg_owin.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
plot(childcareSG_ppp)
```

![](images/clipboard-628625749.png)

## Kernel Density Estimation of Spatial Point Event

The code chunk below re-scale the unit of measurement from metre to kilometre before performing KDE.

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 
                                  1000, 
                                  "km")

kde_childcareSG_adaptive <- adaptive.density(
  childcareSG_ppp.km, 
  method="kernel")
plot(kde_childcareSG_adaptive)
```

![](images/clipboard-415122219.png)

## Kernel Density Estimation

Code chunk shown two different ways to convert KDE output into grid object

```{r}
par(bg = '#E4D5C9')

gridded_kde_childcareSG_ad <- maptools::as.SpatialGridDataFrame.im(
  kde_childcareSG_adaptive)
spplot(gridded_kde_childcareSG_ad)
```

```{r}
gridded_kde_childcareSG_ad <- as(
  kde_childcareSG_adaptive,
  "SpatialGridDataFrame")
spplot(gridded_kde_childcareSG_ad)
```

![](images/clipboard-294957302.png)

### Visualising KDE using tmap

The code chunk below is used to plot the output raster by using tmap functions.

```{r}
tm_shape(kde_childcareSG_ad_raster) + 
  tm_raster(palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), 
            frame = FALSE,
            bg.color = "#E4D5C9")
```

![](images/clipboard-373649832.png)

## Extracting study area using sf objects

Extract and create an ppp object showing child care services and within Punggol Planning Area

On the other hand, `filter()` of dplyr package should be used to extract the target planning areas as shown in the code chunk below.

```{r}
pg_owin <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL") %>%
  as.owin()

childcare_pg = childcare_ppp[pg_owin]

plot(childcare_pg)  
```

![](images/clipboard-4134194683.png)

## Monte Carlo Simulation

In order to ensure reproducibility, it is important to include the code chunk below before using spatstat functions involve Monte Carlo simulation

```{r}
set.seed(1234)
```

## Edge correction methods of spatstat

In spatstat, edge correction methods are used to handle biases that arise when estimating spatial statistics near the boundaries of a study region. These corrections are essential for ensuring accurate estimates in spatial point pattern analysis, especially for summary statistics like the K-function, L-function, pair correlation function, etc.

Common Edge Correction Methods in spatstat

-   “none”: No edge correction is applied. This method assumes that there is no bias at the edges, which may lead to underestimation of statistics near the boundaries.

-   “isotropic”: This method corrects for edge effects by assuming that the point pattern is isotropic (uniform in all directions). It compensates for missing neighbors outside the boundary by adjusting the distances accordingly.

-   “translate” (Translation Correction): This method uses a translation correction, which involves translating the observation window so that every point lies entirely within it. The statistic is then averaged over all possible translations.

-   “Ripley” (Ripley’s Correction): Similar to the isotropic correction but specifically tailored for Ripley’s K-function and related functions. It adjusts the expected number of neighbors for points near the edges based on the shape and size of the observation window.

-   “border”: Border correction reduces bias by only considering points far enough from the boundary so that their neighborhood is fully contained within the window. This can be quite conservative but reduces the influence of edge effects.

## Geospatial Analytics for Social Good: Thailand Road Accident Case Study

### Background

-   [Road traffic injuries](https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries), WHO.

-   [Road traffic deaths and injuries in Thailand](https://cdn.who.int/media/docs/default-source/thailand/roadsafety/overview-en-final-25-7-19.pdf?sfvrsn=f9d7a862_2)

## The Study Area

The study area is [Bangkok Metropolitan Region](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region).![](images/clipboard-3943255741.png)

The projected coordinate system of Thailand is **WGS 84 / UTM zone 47N** and the EPSG code is [32647](https://epsg.io/32647).

## The Data

For the purpose of this exercise, three basic data sets are needed, they are:

-   [Thailand Road Accident \[2019-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle

-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.

## Importing Traffic Accident Data

Using the steps you learned in previous lessons, import the downloaded accident data into R environment and save the output as an sf tibble data.frame.

```{r}
rdacc_sf <- read_csv("data/thai_road_accident_2019_2022.csv") %>%
  filter(!is.na(longitude) & longitude != "", 
         !is.na(latitude) & latitude != "") %>%
  st_as_sf(coords = c(
    "longitude", "latitude"),
    crs=4326) %>%
  st_transform(crs = 32647) 
```

## Visualising The Accident Data

Using the steps you learned in previous lessons, import the ACLED data into R environment as an sf tibble data.frame.

```{r}
tmap_mode("plot")
acled_sf %>%
  filter(year == 2023 | 
           event_type == "Political violence") %>%
  tm_shape()+
  tm_dots()
tmap_mode("plot")
```
