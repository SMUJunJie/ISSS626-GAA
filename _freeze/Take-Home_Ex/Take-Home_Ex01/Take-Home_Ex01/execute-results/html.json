{
  "hash": "2728c9226e1689880284fd31b91e934d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home_Exercise 1\"\nauthor: \"Qu JunJie\"\ndate: \"09 Sep 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, tmap, spNetwork, spatstat,ggplot2, leaflet, dplyr, lubridate, dbscan, igraph)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#! eval:false\nacc <- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %>%\n  mutate(Month_num = month(incident_datetime)) %>%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %>%\n  mutate(dayofweek = weekdays(incident_datetime))%>%\n  filter(!is.na(longitude) & !is.na(latitude)) %>%  # Remove rows with missing coordinates\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBMR_acc <- acc %>%\n  filter(province_en %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \n                            \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(BMR_acc, \"data/rds/BMR_acc_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBMR_acc_data <- read_rds(\"data/rds/BMR_acc_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_one_map <- st_read(dsn = \"data/rawdata\",\n                        layer = \"hotosm_tha_roads_lines_shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `D:\\SMUJunJie\\ISSS626-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundaries <- st_read(dsn = \"data/rawdata\",\n                        layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `D:\\SMUJunJie\\ISSS626-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbangkok_boundary <- admin_boundaries %>%\n  filter(ADM1_EN == \"Bangkok\")\n\nNonthaburi_boundary <- admin_boundaries %>%\n  filter(ADM1_EN == \"Nonthaburi\")\n\nNakhon_Pathom_boundary <- admin_boundaries %>%\n  filter(ADM1_EN == \"Nakhon Pathom\")\n\nPathum_Thani_boundary <- admin_boundaries %>%\n  filter(ADM1_EN == \"Pathum Thani\")\n\nSamut_Prakan_boundary <- admin_boundaries %>%\n  filter(ADM1_EN == \"Samut Prakan\")\n\nSamut_Sakhon_boundary <- admin_boundaries %>%\n  filter(ADM1_EN == \"Samut Sakhon\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thai_one_map) <- 4326\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBMR_acc <- acc %>%\n  filter(province_en %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \n                            \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\"))\n\nBangkok_roads <- st_intersection(thai_one_map, bangkok_boundary)\n\nNonthaburi_roads <- st_intersection(thai_one_map, Nonthaburi_boundary)\n\nNakhon_Pathom_roads <- st_intersection(thai_one_map, Nakhon_Pathom_boundary)\n\nPathum_Thani_roads <- st_intersection(thai_one_map, Pathum_Thani_boundary)\n\nSamut_Prakan_roads <- st_intersection(thai_one_map, Samut_Prakan_boundary)\n\nSamut_Sakhon_roads <- st_intersection(thai_one_map, Samut_Sakhon_boundary)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBangkok_roads <- st_intersection(thai_one_map, bangkok_boundary)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_data <- BMR_acc_data %>%\n  mutate(\n    incident_date = as.Date(incident_datetime),\n    year = year(incident_datetime),\n    month = month(incident_datetime, label = TRUE),\n    day_of_week = wday(incident_datetime, label = TRUE)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot number of accidents by year and month\nggplot(acc_data, aes(x = incident_date)) +\n  geom_histogram(binwidth = 30, fill = \"blue\", color = \"white\") +\n  labs(title = \"Number of Accidents Over Time\", x = \"Date\", y = \"Number of Accidents\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the spatial distribution of accidents on the road network\nggplot() +\n  geom_sf(data = Bangkok_roads, color = \"antiquewhite\") +\n  geom_sf(data = Nonthaburi_roads, color =\"aquamarine\") +\n  geom_sf(data = Nakhon_Pathom_roads, color = \"azure\") +\n  geom_sf(data = Pathum_Thani_roads, color = \"burlywood\") +\n  geom_sf(data = Samut_Prakan_roads, color = \"chartreuse\") +\n  geom_sf(data = Samut_Sakhon_roads, color = \"gray\") +\n  geom_sf(data = BMR_acc_data, aes(geometry = geometry), color = \"red\", size = 0.5) +\n  labs(title = \"Spatial Distribution of Road Accidents in BMR\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Extract hour of the day and day of the week for accidents\nacc_data <- acc_data %>%\n  mutate(hour_of_day = hour(incident_datetime),\n         day_of_week = wday(incident_datetime, label = TRUE))\n\n# Step 2: Summarize the data by hour of day and day of week\nsummary_data <- acc_data %>%\n  group_by(hour_of_day, day_of_week) %>%\n  summarise(count = n())  # Count the number of accidents for each combination\n\n# Step 3: Create a heatmap of accidents by hour and day of week\nggplot(summary_data, aes(x = hour_of_day, y = day_of_week, fill = count)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  labs(title = \"Heatmap of Accidents by Hour of Day and Day of Week\", \n       x = \"Hour of Day\", y = \"Day of Week\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_data <- BMR_acc_data %>%\n  mutate(month = month(incident_datetime))  # Extract month from incident datetime\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_data <- acc_data %>%\n  mutate(\n    year = year(incident_datetime),    # Extract year\n    month = month(incident_datetime)   # Extract month\n  )\nmonthly_accidents <- acc_data %>%\n  group_by(year, month) %>%\n  summarise(count = n())\n# Plot time series of accidents\nggplot(monthly_accidents, aes(x = interaction(year, month, sep = \"-\"), y = count, group = 1)) +\n  geom_line(color = \"blue\") +\n  geom_point() +\n  labs(title = \"Monthly Accident Counts Over Time\", x = \"Year-Month\", y = \"Number of Accidents\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use spatial coordinates for clustering\ncoords <- st_coordinates(acc_data$geometry)\n\n# Perform DBSCAN clustering\ndbscan_result <- dbscan(coords, eps = 500, minPts = 5)  # eps defines the neighborhood size in meters\n\n# Add clustering result back to the data\nacc_data$cluster <- dbscan_result$cluster\n\n# Visualize clusters\nggplot() +\n  geom_sf(data = Bangkok_roads, color = \"antiquewhite\") +\n  geom_sf(data = Nonthaburi_roads, color =\"aquamarine\") +\n  geom_sf(data = Nakhon_Pathom_roads, color = \"azure\") +\n  geom_sf(data = Pathum_Thani_roads, color = \"burlywood\") +\n  geom_sf(data = Samut_Prakan_roads, color = \"chartreuse\") +\n  geom_sf(data = Samut_Sakhon_roads, color = \"gray\") +\n  geom_sf(data = acc_data, aes(geometry = geometry, color = factor(cluster)), size = 0.5) +\n  labs(title = \"Spatial Clustering of Accidents Using DBSCAN\", color = \"Cluster\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a time series object for accident counts\nts_data <- ts(monthly_accidents$count, start = c(min(monthly_accidents$year), min(as.numeric(monthly_accidents$month))), frequency = 12)\n\n# Perform seasonal decomposition\ndecomp <- stl(ts_data, s.window = \"periodic\")\n\n# Plot the decomposition\nplot(decomp, main = \"Seasonal Decomposition of Monthly Accident Counts\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  # Remove duplicated coordinates\n  unique_coords <- unique(coords)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_for_month <- function(month_data) {\n  # Extract coordinates\n  coords <- st_coordinates(month_data$geometry)\n  \n  # No need to remove duplicates, proceed with all coordinates\n  # Create a bounding box or window for the KDE\n  window <- as.owin(st_bbox(month_data))\n  \n  # Convert to a point pattern for KDE\n  acc_ppp <- ppp(x = coords[,1], y = coords[,2], window = window)\n  \n  # Perform Kernel Density Estimation with an optimal sigma value\n  acc_kde <- density(acc_ppp, sigma = 300)  # Adjust sigma as needed\n  \n  # Convert KDE result to data frame for ggplot\n  kde_raster <- as.data.frame(acc_kde)\n  \n  return(kde_raster)\n}\n\n# Suppress warnings related to duplicate points\noptions(warn = -1)\n\n# Calculate KDE for each month\nkde_data <- BMR_acc_data %>%\n  group_by(Month_num) %>%\n  group_map(~ kde_for_month(.x), .keep = TRUE)  # Apply KDE for each group (month)\n\n# Combine all KDE data\nkde_combined <- bind_rows(kde_data, .id = \"month\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(kde_combined, aes(x = x, y = y, fill = value)) +\n  geom_raster() +\n  scale_fill_viridis_c(option = \"magma\", direction = -1) +  # Magma with reverse direction for contrast\n  labs(title = \"KDE of Road Traffic Accidents by Month\", fill = \"Density\") +\n  facet_wrap(~ month, ncol = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(warn = -1)\n# Extract the spatial coordinates from the geometry column\ncoords <- st_coordinates(acc_data$geometry)\n\n# Create a window (bounding box) for your study area\nwindow <- as.owin(st_bbox(acc_data))\n\n# Convert the accident data to a point pattern (ppp) object for spatstat\nacc_ppp <- ppp(x = coords[, 1], y = coords[, 2], window = window)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform K-function analysis\nk_function <- Kest(acc_ppp)\n\n# Plot the result\nplot(k_function, main = \"Ripley's K-function for Road Accidents\", \n     legendargs = list(x = \"topright\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Monte Carlo simulations to compare with CSR\nenvelope_k <- envelope(acc_ppp, Kest, nsim = 99)  # Perform 99 simulations for CSR\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot the envelope of the K-function (observed vs CSR)\nplot(envelope_k, main = \"K-function with CSR Envelope\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Monte Carlo simulations to compare with CSR\nenvelope_k <- envelope(acc_ppp, Kest, nsim = 99)  # Perform 99 simulations for CSR\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot the envelope of the K-function (observed vs CSR)\nplot(envelope_k, main = \"K-function with CSR Envelope\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-Home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}