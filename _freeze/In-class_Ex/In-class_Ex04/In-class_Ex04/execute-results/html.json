{
  "hash": "3286588860eb65b2953fa23aa65272a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class_Ex04\"\nauthor: \"Qu JunJie\"\ndate: \"17 Sep 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\nformat: \n  html:\n    code-fold: true\n---\n\n\n## Loading the package\n\nIn this in-class exercise, sf, spdep, tmap, tidyverse, knitr and GWmodel will be used.\n\nUsing the step you leanred from previous hands-in, install and load the necessary R packages in R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,ggstatsplot, tmap, tidyverse, knitr, GWmodel)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInstalling package into 'C:/Users/cttdn/AppData/Local/R/win-library/4.3'\n(as 'lib' is unspecified)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nalso installing the dependencies 'glue', 'rlang'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3/PACKAGES'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'glue' successfully unpacked and MD5 sums checked\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: cannot remove prior installation of package 'glue'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file.copy(savedcopy, lib, recursive = TRUE): problem copying\nC:\\Users\\cttdn\\AppData\\Local\\R\\win-library\\4.3\\00LOCK\\glue\\libs\\x64\\glue.dll to\nC:\\Users\\cttdn\\AppData\\Local\\R\\win-library\\4.3\\glue\\libs\\x64\\glue.dll:\nPermission denied\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: restored 'glue'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'rlang' successfully unpacked and MD5 sums checked\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: cannot remove prior installation of package 'rlang'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file.copy(savedcopy, lib, recursive = TRUE): problem copying\nC:\\Users\\cttdn\\AppData\\Local\\R\\win-library\\4.3\\00LOCK\\rlang\\libs\\x64\\rlang.dll\nto C:\\Users\\cttdn\\AppData\\Local\\R\\win-library\\4.3\\rlang\\libs\\x64\\rlang.dll:\nPermission denied\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: restored 'rlang'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'ggstatsplot' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\cttdn\\AppData\\Local\\Temp\\Rtmpq2jcih\\downloaded_packages\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nggstatsplot installed\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggstatsplot' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in pacman::p_load(sf, ggstatsplot, tmap, tidyverse, knitr, GWmodel): Failed to install/load:\nggstatsplot\n```\n\n\n:::\n:::\n\n\n## Preparing the Data\n\nFor this in-class exercise, Hunan shapefile and Hunan_2012 data file will be used.Using the steps you learned from previous hands-on, complete the following tasks:\n\n-   import Hunan shapefile and parse it into a sf polygon feature object.\n\n-   import Hunan_2012.csv file parse it into a tibble data.frame.\n\n-   join Hunan and Hunan_2012 data.frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `D:\\SMUJunJie\\ISSS626-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n```{# {r}\n# hunan_sf <- left_join(hunan_sf, hunan2012) %>%\n#   select(1:3, 7,15, 16, 31,32)\n```\n\n## Mapping GDPPC\n\nUsing the steps you learned from Hands-on Exercise 5, prepare a choropleth map showing the geographic distribution of GDPPC of Hunan Province.![](images/clipboard-26712824.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# basemap <- tm_shape(hunan_sf) +\n#   tm_polygons() +\n#   tm_text(\"NAME_3\", size=0.5)\n# \n# gdppc <- qtm(hunan_sf, \"GDPPC\")\n# tmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n:::\n\n\n## Converting to SpatialPolygonDataFrame\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# hunan_sp <- hunan_sf %>%\n#   as_Spatial()\n```\n:::\n\n\n## Geographically Weighted Summary Statistics with adaptive bandwidth\n\n### Determine adaptive bandwidth\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw_CV <- bw.gwr(GDPPC ~ 1,\n#                 data = hunan_sp,\n#                 approach = \"CV\",\n#                 adaptive = TRUE,\n#                 kernel = \"bisquare\",\n#                 longlat = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw_CV\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw_AIC <- bw.gwr(GDPPC ~ 1,\n#                 data = hunan_sp,\n#                 approach = \"AIC\",\n#                 adaptive = TRUE,\n#                 kernel = \"bisquare\",\n#                 longlat = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw_AIC\n```\n:::\n\n\n## Geographically Weighted Summary Statistics with adaptive bandwidth\n\n### Computing geographically wieghted summary statistics\n\n```{# {r}\n# gwstat <- gwss(data = hunan_sp,\n#                vars = \"GDPPC\",\n#                bw = bw_AIC,\n#                kernel = \"bisquare\",\n#                adaptive = TRUE,\n#                longlat = T)\n```\n\n### Preparing the output data\n\nCode chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\nNext, `cbind()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# hunan_gstat <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n## Visualising geographically weighted summary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tm_shape(hunan_gstat) +\n#   tm_fill(\"GDPPC_LM\",\n#           n = 5,\n#           style = \"quantile\") +\n#   tm_borders(alpha = 0.5) +\n#   tm_layout(main.title = \"Distribution of Geographically weighted mean\",\n#             main.title.position = \"center\",\n#             main.title.size = 1.0,\n#             legend.text.size = 0.5,\n#             legend.height = 0.5,\n#             legend.width = 0.5,\n#             frame = TRUE)\n```\n:::\n\n\n![](images/clipboard-3445924197.png)\n\n### Determine fixed bandwidth\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw_CV <- bw.gwr(GDPPC ~ 1,\n#                 data = hunan_sp,\n#                 approach = \"CV\",\n#                 adaptive = FALSE,\n#                 kernel = \"bisquare\",\n#                 longlat = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw_AIC <- bw.gwr(GDPPC ~ 1,\n#                 data = hunan_sp,\n#                 approach = \"AIC\",\n#                 adaptive = FALSE,\n#                 kernel = \"bisquare\",\n#                 longlat = T)\n```\n:::\n\n\n### Computing adaptive bandwidth\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gwstat <- gwss(data = hunan_sp,\n#                vars = \"GDPPC\",\n#                bw = bw_AIC,\n#                kernel = \"bisquare\",\n#                adaptive = FALSE,\n#                longlat = T)\n```\n:::\n\n\n### Preparing the output data\n\nCode chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\nNext, `cbind()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# hunan_gstat <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n### Visualising geographically weighted summary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tm_shape(hunan_gstat) +\n#   tm_fill(\"GDPPC_LM\",\n#           n = 5,\n#           style = \"quantile\") +\n#   tm_borders(alpha = 0.5) +\n#   tm_layout(main.title = \"Distribution of geographically wieghted mean\",\n#             main.title.position = \"center\",\n#             main.title.size = 2.0,\n#             legend.text.size = 1.2,\n#             legend.height = 1.50, \n#             legend.width = 1.50,\n#             frame = TRUE)\n```\n:::\n\n\n![](images/clipboard-3210947487.png)\n\n## Geographically Weighted Correlation with Adaptive Bandwidth\n\nBusiness question: Is there any relationship between GDP per capita and Gross Industry Output?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggscatterstats(\n#   data = hunan2012, \n#   x = Agri, \n#   y = GDPPC,\n#   xlab = \"Gross Agriculture Output\", ## label for the x-axis\n#   ylab = \"GDP per capita\", \n#   label.var = County, \n#   label.expression = Agri > 10000 & GDPPC > 50000, \n#   point.label.args = list(alpha = 0.7, size = 4, color = \"grey50\"),\n#   xfill = \"#CC79A7\", \n#   yfill = \"#009E73\", \n#   title = \"Relationship between GDP PC and Gross Agriculture Output\")\n```\n:::\n\n\n![](images/clipboard-1731408329.png)\n\nGeospatial analytics solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw <- bw.gwr(GDPPC ~ GIO, \n#              data = hunan_sp, \n#              approach = \"AICc\", \n#              adaptive = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# gwstats <- gwss(hunan_sp, \n#                 vars = c(\"GDPPC\", \"GIO\"), \n#                 bw = bw,\n#                 kernel = \"bisquare\",\n#                 adaptive = TRUE, \n#                 longlat = T)\n```\n:::\n\n\nCode chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gwstat_df <- as.data.frame(gwstats$SDF) %>%\n#   select(c(12,13)) %>%\n#   rename(gwCorr = Corr_GDPPC.GIO,\n#          gwSpearman = Spearman_rho_GDPPC.GIO)\n```\n:::\n\n\nNext, `cbind()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# hunan_Corr <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n## Visualising Local Correlation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tm_shape(hunan_Corr) +\n#   tm_fill(\"gwSpearman\",\n#           n = 5,\n#           style = \"quantile\") +\n#   tm_borders(alpha = 0.5) +\n#   tm_layout(main.title = \"Local Spearman Rho\",\n#             main.title.position = \"center\",\n#             main.title.size = 2.0,\n#             legend.text.size = 1.2,\n#             legend.height = 1.50, \n#             legend.width = 1.50,\n#             frame = TRUE)\n```\n:::\n\n\n![](images/clipboard-3972512876.png)\n\n![](images/clipboard-864910896.png)\n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}