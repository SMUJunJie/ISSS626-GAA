---
title: "Hands-on Exercise 1:Geospatial Data Wrangling with R"
author: "Qu JunJie"
date: "17 Aug 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
format: 
  html:
    code-fold: true
---

# 1. Overview

This Hands-on exercise focuses on importing and manipulating geospatial data using the relevant R packages

# 2. Get Started

The code chunk below installs and loads sf and tidyverse packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

# 3. Importing Geospatial Data

In this section, you will learn how to import the following geospatial data into R using the `st_read()` function from the `sf` package:

-   `MP14_SUBZONE_WEB_PL`: a polygon feature layer in ESRI shapefile format

-   `CyclingPath`: a line feature layer in ESRI shapefile format

-   `PreSchool`: a point feature layer in KML file format

## 3.1 Import polygon feature data in shapefile format

The following code chunk demonstrates how to use the `st_read()` function from the `sf` package to import the `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame. When working with shapefiles, two arguments are required: `dsn` to specify the data path and `layer` to indicate the shapefile name. It’s important to note that file extensions like `.shp`, `.dbf`, `.prj`, and `.shx` are not needed.

```{r}
mpsz = st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

The message above indicates that the geospatial objects are multipolygon features. There are 323 multipolygon features with 15 associated fields in the `MP14_SUBZONE_WEB_PL` simple feature data frame. The data is projected using the SVY21 coordinate reference system (CRS). The bounding box details the spatial extent of the data, with the x-axis ranging from 2,667.538 to 56,396.44 and the y-axis ranging from 15,748.72 to 50,256.33.

## 3.2 Import polyline feature data in shapefile form

The code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPathGazette")
```

The message above reveals that there are a total of 3,138 features and 2 fields in the `CyclingPathGazette` multiline string feature data frame, and it is also in the SVY21 projected coordinate system.

## 3.3 Import GIS data in kml format

The `PreSchoolsLocation` is in kml format. The code chunk below will be used to import the kml into R. Notice that in the code chunk below, the complete path and the kml file extension were provided.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

The message above reveals that `PRESCHOOLS_LOCATION` is a point feature data frame with a total of 2,290 features and 2 fields. Unlike the previous two simple feature data frames, this one uses the WGS 84 coordinate system. Additionally, the data includes Z-dimension values, with a Z range from 0 to 0.

# 4. Checking the Content of a Simple Feature Data Frame

In this sub-section, you will explore various methods for extracting information about the contents of a simple feature data frame.

## 4.1 Working with st_geometry()

The column in the `sf` data frame that holds the geometries is a list of class `sfc`. While you can access the geometry list-column using `mpsz$geom` or `mpsz[[1]]`, the more general and preferred method is to use the `st_geometry()` function, as demonstrated in the code chunk below.

```{r}
st_geometry(mpsz)
```

Note that the print output only shows basic details of the feature class, including the geometry type, the geographic extent of the features, and the data's coordinate system.

## 4.2 Working with glimpse()

In addition to the basic feature information, we also want to explore the associated attribute data within the data frame. This is where the `glimpse()` function from `dplyr` becomes particularly useful, as demonstrated in the code chunk below.

```{r}
glimpse(mpsz)
```

## 4.3 Working with head()

Sometimes we would like to reveal complete information of a feature object, this is the job of *head()* of Base R

```{r}
head(mpsz, n=5) 
```

# 5. Plotting the Geospatial Data

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find *plot()* of R Graphic comes in very handy as shown in the code chunk below.

```{r}
plot(mpsz, max.plot = 15)
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

# 6.Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

In this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation**.

## 6.1 Assigning EPSG code to a simple feature data frame

A common issue when importing geospatial data into R is that the coordinate system may be either missing (such as when the `.proj` file for an ESRI shapefile is absent) or incorrectly assigned during the import process.

The example below demonstrates how to check the coordinate system of the `mpsz` simple feature data frame using the `st_crs()` function from the `sf` package.

```{r}
st_crs(mpsz)
```

Based on the results above, although the `mpsz` data frame is projected in SVY21, the printout indicates that the EPSG code is 9001. This is incorrect because the correct EPSG code for SVY21 should be 3414.

To assign the correct EPSG code to the `mpsz` data frame, you can use the `st_set_crs()` function from the `sf` package, as demonstrated in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

## 6.2 Transforming the projection of preschool from wgs84 to svy21.

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

# 7.Importing and Converting An Aspatial Data

In practice, it is not unusual that we will come across data such as `listing` of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

In this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.

For the purpose of this exercise, the `listings.csv` data downloaded from AirBnb will be used.

## 7.1 Importing the aspatial data

Since `listings` data set is in csv file format, we will use *read_csv()* of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a tibble data frame.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
list(listings)
```

The output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

## 7.2 Creating a simple feature data frame from an aspatial data frame

The code chunk below converts `listing` data frame into a simple feature data frame by using *st_as_sf()* of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

# 8. Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, you will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.

## 8.1 Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, *st_buffer()* of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

Mission Completed!

## 8.2 Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, *length()* of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the *top_n()* of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

The solution:

Firstly, the code chunk below uses *st_area()* of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, *mutate()* of **dplyr** package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

print(mpsz3414)
```

# 9. Exploratory Data Analysis (EDA)

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

The solution:

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
